class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) return 0;
        int N = s.length();
        // dp[i][j] denotes the lps of s.substring(i, j+1);
        int[][] dp = new int[N][N];
        for (int i = 0; i < N; i++) dp[i][i] = 1;
        for (int len = 2; len <= N; len++) {
            for (int i = 0; i + len - 1 < N; i++) {
                // i, i+len-1
                if (s.charAt(i) == s.charAt(i+len-1)) {
                    dp[i][i+len-1] = dp[i+1][i+len-2] + 2;
                } else {
                    dp[i][i+len-1] = Math.max(dp[i][i+len-2], dp[i+1][i+len-1]);
                }
            }
        }
        return dp[0][N-1];
        
    }
}
