class Solution {
    public int cutOffTree(List<List<Integer>> forest) {
        if (forest == null || forest.size() == 0) return 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b)->a[2]-b[2]);
        for (int i = 0; i < forest.size(); i++) {
            for (int j = 0; j < forest.get(0).size(); j++) {
                if (forest.get(i).get(j) > 1) pq.add(new int[]{i, j, forest.get(i).get(j)});
            }
        }
        int step = 0; int[] start = new int[2];
        while (!pq.isEmpty()) {
            int[] temp = pq.poll();
            int minStep = bfs(start, temp, forest);
            if (minStep == -1) return -1;
            step += minStep;
            start = temp.clone();
        }
        return step;
    }
    public int[][] dir = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
    private int bfs(int[] start, int[] end, List<List<Integer>> f) {
        int M = f.size(), N = f.get(0).size(); boolean[][] visit = new boolean[M][N];
        Queue<int[]> q = new LinkedList<>(); q.add(start); 
        visit[start[0]][start[1]] = true; int level = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int[] p = q.poll();
                if (p[0] == end[0] && p[1] == end[1]) return level;
                for (int[] d : dir) {
                    int x = p[0] + d[0], y = p[1] + d[1];
                    if (x >= 0 && x < M && y >= 0 && y < N && !visit[x][y] && f.get(x).get(y) != 0) {
                        visit[x][y] = true; q.add(new int[]{x, y});
                    }
                }
            }
            level++;
        }
        return -1;
    }
}
