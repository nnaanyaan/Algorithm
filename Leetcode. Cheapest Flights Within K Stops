public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
    //dp[i][j] denotes the cheapest price within i-1 stops, stop in j city
    long[][] dp = new long[K+2][n];
    for (long[] d : dp) Arrays.fill(d, Integer.MAX_VALUE);
    dp[0][src] = 0;
    for (int i = 1; i < K+2; i++) {
        dp[i][src] = 0;
        for (int[] f : flights) {
            dp[i][f[1]] = Math.min(dp[i][f[1]], dp[i-1][f[0]] + f[2]);
        }
    }
    return dp[K+1][dst] == Integer.MAX_VALUE ? -1 : (int)dp[K+1][dst];
}
    
  public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
      HashMap<Integer, HashMap<Integer, Integer>> map = new HashMap<>();  
      for (int i = 0; i < n; i++) map.put(i, new HashMap<>());
      for (int[] f : flights) {
          map.get(f[0]).put(f[1], f[2]);
      }
      PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)-> a[0] - b[0]);
      pq.add(new int[]{0, src, 0});    
      while (!pq.isEmpty()) {
          int[] top = pq.poll();
          int price = top[0], city = top[1], stop = top[2];
          if (city == dst) return price;
          if (stop <= K) {
              for (int adj : map.get(city).keySet()) {
                  pq.add(new int[]{price + map.get(city).get(adj), adj, stop + 1});
              }
          }
      }
      return -1;
  }
