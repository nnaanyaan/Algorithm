class Solution {
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        return dfs(price, special, needs, 0);
    }
    private int dfs(List<Integer> price, List<List<Integer>> special, List<Integer> needs, int start) {
        int res = directBuy(price, needs);
        for (int i = start; i < special.size(); i++) {
            List<Integer> offer = special.get(i);
            if (validOffer(needs, offer)) {
                List<Integer> tempNeed = new ArrayList<>();
                for (int j = 0; j < needs.size(); j++) {
                    tempNeed.add(needs.get(j) - offer.get(j));
                }
                res = Math.min(res, offer.get(offer.size()-1) + dfs(price, special, tempNeed, i));
            }  
        }
        return res;
    }
    private int directBuy(List<Integer> price, List<Integer> needs) {
        int sum = 0;
        for (int i = 0; i < price.size(); i++) {
            sum += price.get(i) * needs.get(i);
        }
        return sum;
    }
    private boolean validOffer(List<Integer> needs, List<Integer> offer) {
        for (int i = 0; i < needs.size(); i++) {
            if (needs.get(i) < offer.get(i)) return false;
        }
        return true;
    }
}
