public class Solution {
    /**
     * @param maze: the maze
     * @param start: the start
     * @param destination: the destination
     * @return: whether the ball could stop at the destination
     */
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        int M = maze.length, N = maze[0].length;
        boolean[][] visit = new boolean[M][N];
        int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        Queue<int[]> q = new LinkedList<>();
        q.add(start); visit[start[0]][start[1]] = true;
        while (!q.isEmpty()) {
            int[] pop = q.poll();
            if (Arrays.equals(pop, destination)) return true;
            for (int[] d : dir) {
                int x = pop[0], y = pop[1];
                while (x + d[0] >= 0 && x + d[0] < M && y + d[1] >= 0 && y + d[1] < N && maze[x + d[0]][y + d[1]] == 0) {
                    x += d[0]; y += d[1];
                }
                if (!visit[x][y]) {
                    q.add(new int[]{x, y});
                    visit[x][y] = true;
                }
            }
        }
        return false;
    }
}
